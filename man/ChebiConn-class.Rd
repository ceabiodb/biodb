% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ChebiConn.R
\docType{class}
\name{ChebiConn-class}
\alias{ChebiConn-class}
\alias{ChebiConn}
\title{ChEBI connector class.}
\description{
This is the connector class for connecting to the ChEBI database through its
web services.
}
\section{Methods}{

\describe{
\item{\code{convCasToChebi(cas, simplify = TRUE)}}{Convert a list of CAS IDs into a list of ChEBI IDs. Several ChEBI IDs may
be returned for a single CAS ID. If `simplify` is set to `TRUE`, and only
one ChEBI ID has been found for each CAS ID, then a character vector is
returned. Otherwise a list of character vectors is returned.}

\item{\code{convIdsToChebiIds(ids, search.category, simplify = TRUE)}}{Convert a list of IDs into a list of ChEBI IDs. Several ChEBI IDs may
be returned for a single ID. If `simplify` is set to `TRUE`, and only
one ChEBI ID has been found for each ID, then a character vector is
returned. Otherwise a list of character vectors is returned. The
`search.category` parameter is the same used for `wsGetLiteEntity()`.}

\item{\code{convInchiToChebi(inchi, simplify = TRUE)}}{Convert a list of InChI or InChI KEYs into a list of ChEBI IDs. Several
ChEBI IDs may
be returned for a single InChI or InChI KEY. If `simplify` is set to `TRUE`,
and only
one ChEBI ID has been found for each InChI, then a character vector is
returned. Otherwise a list of character vectors is returned.}

\item{\code{getEntryImageUrl(entry.id)}}{:

Gets the URL to a picture of the entry (e.g.: a picture of the
    molecule in case of a compound entry).
    
entry.id: A character vector containing entry IDs.
    
Returned value: A character vector, the same length as `entry.id`,
    containing for each entry ID either a URL or NA if no URL exists.
    }

\item{\code{getEntryPageUrl(entry.id)}}{Get the URL to the page of the entry on the database web site.}

\item{\code{getSearchCategories()}}{Returns the list of allowed search categories for the getLiteEntity web
service.}

\item{\code{getStarsCategories()}}{Returns the list of allowed stars categories for the getLiteEntity web
service.}

\item{\code{getWsdl()}}{Get the WSDL as a an XML object.}

\item{\code{getWsdlEnumeration(name)}}{Extract a list of enumerations from the WSDL.}

\item{\code{searchCompound(name = NULL, mass = NULL, mass.field = NULL,
  mass.tol = 0.01, mass.tol.unit = "plain", max.results = NA_integer_)}}{Search for compounds by name and/or by mass. At least one of name or mass
    must be set.
    
name: The name of a compound to search for.
    
mass: The searched mass.
    
mass.field: For searching by mass, you must indicate a mass field to use
    ('monoisotopic.mass', 'molecular.mass', 'average.mass' or 'nominal.mass').
    
mass.tol: The tolerance value on the molecular mass.
    
mass.tol.unit: The type of mass tolerance. Either 'plain' or 'ppm'.
    
max.results: The maximum number of matches to return.
    
Returned value: A character vector of entry IDs.}

\item{\code{wsGetLiteEntity(search = NULL, search.category = "ALL", max.results = 10,
  stars = "ALL", retfmt = c("plain", "parsed", "request", "ids"))}}{Calls getLiteEntity web service and returns the XML result.
Be careful when search by mass
(search.category="MASS" or "MONOISOTOPIC MASS"), since the searched is made
 in text mode, thus the number must be exactly written as it stored in
 database eventually padded with 0 in order to have exactly 5 digits after
 the decimal. An easy solution is to use wildcards to search a mass:
 "410;.718*".
See http://www.ebi.ac.uk/chebi/webServices.do.}

\item{\code{wsWsdl(retfmt = c("plain", "parsed", "request"))}}{Returns the complete WSDL from the the web server.}
}}

