% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ChebiConn.R
\docType{class}
\name{ChebiConn-class}
\alias{ChebiConn-class}
\alias{ChebiConn}
\title{ChEBI connector class.}
\description{
This is the connector class for connecting to the ChEBI database through its
web services.
}
\section{Methods}{

\describe{
\item{\code{convCasToChebi(cas, simplify = TRUE)}}{:

Converts a list of CAS IDs into a list of ChEBI IDs.
    Several ChEBI IDs may be returned for a single InChI or InChI KEY.
    
simplify: If set to TRUE and only one ChEBI ID has been found for each ID,
    then a character vector is returned. Otherwise a list of character vectors
    is returned.
    
Returned value: Depending on the value of simplify.
    }

\item{\code{convIdsToChebiIds(ids, search.category, simplify = TRUE)}}{:

Converts a list of IDs (InChI, InChI Keys, CAS, ...) into a list of
    ChEBI IDs. Several ChEBI IDs may be returned for a single ID.
    
simplify: If set to TRUE and only one ChEBI ID has been found for each ID,
    then a character vector is returned. Otherwise a list of character vectors
    is returned.
    
search.category: The search category. Call `getSearchCategories()`
    to get a full list of search categories.
    
Returned value: Depending on the value of simplify.
    }

\item{\code{convInchiToChebi(inchi, simplify = TRUE)}}{:

Converts a list of InChI or InChI KEYs into a list of ChEBI IDs.
    Several ChEBI IDs may be returned for a single InChI or InChI KEY.
    
simplify: If set to TRUE and only one ChEBI ID has been found for each ID,
    then a character vector is returned. Otherwise a list of character vectors
    is returned.
    
Returned value: Depending on the value of simplify.
    }

\item{\code{getEntryImageUrl(entry.id)}}{:

Gets the URL to a picture of the entry (e.g.: a picture of the
    molecule in case of a compound entry).
    
entry.id: A character vector containing entry IDs.
    
Returned value: A character vector, the same length as `entry.id`,
    containing for each entry ID either a URL or NA if no URL exists.
    }

\item{\code{getEntryPageUrl(entry.id)}}{:

Gets the URL to the page of the entry on the database web site.
    
entry.id: A character vector with the IDs of entries to retrieve.
    
Returned value: A list of BiodbUrl objects, the same length as `entry.id`.
    }

\item{\code{getSearchCategories()}}{:

Gets the list of allowed search categories for the getLiteEntity web
    service.
    
Returned value: Returns all the possible search categories as a character
    vector.
    }

\item{\code{getStarsCategories()}}{:

Gets the list of allowed stars categories for the getLiteEntity web
    service.
    
Returned value: Returns all the possible stars categories as a character
    vector.
    }

\item{\code{getWsdl()}}{:

Gets the WSDL as an XML object.
    
Returned value: The ChEBI WSDL as an XML object.
    }

\item{\code{getWsdlEnumeration(name)}}{:

Extracts a list of values from an enumeration in the WSDL.
    
name: The name of the enumeration for which to retrieve the values.
    
Returned value: A character vector listing the enumerated values.
    }

\item{\code{searchCompound(name = NULL, mass = NULL, mass.field = NULL,
  mass.tol = 0.01, mass.tol.unit = "plain", max.results = NA_integer_)}}{Search for compounds by name and/or by mass. At least one of name or mass
    must be set.
    
name: The name of a compound to search for.
    
mass: The searched mass.
    
mass.field: For searching by mass, you must indicate a mass field to use
    ('monoisotopic.mass', 'molecular.mass', 'average.mass' or 'nominal.mass').
    
mass.tol: The tolerance value on the molecular mass.
    
mass.tol.unit: The type of mass tolerance. Either 'plain' or 'ppm'.
    
max.results: The maximum number of matches to return.
    
Returned value: A character vector of entry IDs.}

\item{\code{wsGetLiteEntity(search = NULL, search.category = "ALL", max.results = 10,
  stars = "ALL", retfmt = c("plain", "parsed", "request", "ids"))}}{:

Calls getLiteEntity web service and returns the XML result.
    Be careful when searching by mass
    (search.category='MASS' or 'MONOISOTOPIC MASS'), since the search is made
     in text mode, thus the number must be exactly written as it is stored in
     database, eventually padded with 0 in order to have exactly 5 digits after
     the decimal. An easy solution is to use wildcards to search a mass:
     '410;.718*'.
    See http://www.ebi.ac.uk/chebi/webServices.do for more details.
    
search: The text or pattern to search.
    
search.category: The search category. Call `getSearchCategories()`
    to get a full list of search categories.
    
max.results: The maximum of results to return.
    
stars: How many starts the returned entities should have. Call
    `getStarsCategories() to get a full list of starts categories.`
    
retfmt: The return format to use. 'plain' will return the results as given by the server, in a string. 'parsed' will return an XML object. 'request' will return a BiodbRequest object representing the request as would have been sent. 'ids' will return a list of matched entity IDs.
    
Returned value: Depending on `retfmt` value.
    }

\item{\code{wsWsdl(retfmt = c("plain", "parsed", "request"))}}{:

Retrieves the complete WSDL from the web server.
    
retfmt: The return format to use. 'plain' will return the value as it is
    returned by the server. 'parsed' will return an XML object. 'request' will
    return a BiodbRequest object representing the request that would have been
    sent. 
    
Returned value: Depending on `retfmt` value.
    }
}}

