% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MassCsvFileConn.R
\docType{class}
\name{MassCsvFileConn-class}
\alias{MassCsvFileConn-class}
\alias{MassCsvFileConn}
\title{Mass CSV File connector class.}
\description{
This is the connector class for a MASS CSV file database.
}
\section{Methods}{

\describe{
\item{\code{addField(field, value)}}{:

Adds a new field to the database. The field must not already exist.
    The same single value will be set to all entries for this field.
    A new column will be written in the memory data frame, containing the value
    given.
    
field: A valid Biodb entry field name.
    
value: The value to set for this field.
    
Returned value: None.
    }

\item{\code{addPrecursorFormulae(formulae)}}{:

Adds new formulae to the list of formulae used to recognize precursors.
    
formulae: A character vector containing formulae.
    
Returned value: None.
    }

\item{\code{getChromCol(ids = NULL)}}{:

Gets a list of chromatographic columns contained in this database.
    
ids: A character vector of entry identifiers (i.e.: accession numbers).
    Used to restrict the set of entries on which to run the algorithm.
    
Returned value : A data.frame with two columns, one for the ID 'id' and
    another one for the title 'title'.
    }

\item{\code{getEntryContentFromDb(entry.id)}}{:

Get the contents of entries directly from the database. A direct request or 
    an access to the database will be made in order to retrieve the contents. No
    access to the biodb cache system will be made.
    
entry.id: A character vector with the IDs of entries to retrieve.
    
Returned value: A character vector, the same size of entry.id, with
    contents of the requested entries. An NA value will be set for the content
    of each entry for which the retrieval failed.
    }

\item{\code{getFieldColName(field)}}{:

Get the column name corresponding to a Biodb field.
    
field: A valid Biodb entry field name. This field must be defined for this
    database instance.
    
Returned value: The column name from the CSV file.
    }

\item{\code{getNbEntries(count = FALSE)}}{:

Get the number of entries contained in this database.
    
count: If set to TRUE and no straightforward way exists to get number of
    entries, count the output of getEntryIds().
    
Returned value: The number of entries in the database, as an integer.
    }

\item{\code{getNbPeaks(mode = NULL, ids = NULL)}}{:

Gets the number of peaks contained in the database.
    
mode: The MS mode. Set it to either 'neg' or 'pos' to limit the counting
    to one mode.
    
ids: A character vector of entry identifiers (i.e.: accession numbers).
    Used to restrict the set of entries on which to run the algorithm.
    
Returned value: The number of peaks, as an integer.
    }

\item{\code{getPrecursorFormulae()}}{:

Gets the list of formulae used to recognize precursors.
    
Returned value: A character vector containing chemical formulae.
    }

\item{\code{hasField(field)}}{:

Tests if a field is defined for this database instance.
    
field: A valid Biodb entry field name.
    
Returned value: TRUE of the field is defined, FALSE otherwise.
    }

\item{\code{isAPrecursorFormula(formula)}}{:

Tests if a formula is a precursor formula.
    
formula: A chemical formula, as a character value.
    
Returned value: TRUE if the submitted formula is considered a precursor.
    }

\item{\code{setDb(db)}}{:

Sets the database directly from a data frame. You must not have set
    the database previously with the URL parameter.
    
db: A data frame containing your database.
    
Returned value: None.
    }

\item{\code{setField(field, colname, ignore.if.missing = FALSE)}}{:

Sets a field by making a correspondence between a Biodb field and one
    or more columns of the loaded data frame.
    
field: A valid Biodb entry field name. This field must not be already
    defined for this database instance.
    
colname: A character vector contain one or more column names from the CSV
    file.
    
ignore.if.missing: If set to TRUE, does not raise an error if one of the
    columns does not exists in the CSV file.
    
Returned value: None.
    }

\item{\code{setPrecursorFormulae(formulae)}}{:

Sets the list precursor formulae.
    
formulae: A character vector containing formulae.
    
Returned value: None.
    }
}}

\examples{
# Create an instance with default settings:
mybiodb <- biodb::Biodb()

# Get path to LCMS database example file
lcmsdb <- system.file("extdata", "lcmsdb.tsv", package="biodb")

# Create a connector
conn <- mybiodb$getFactory()$createConn('mass.csv.file', url=lcmsdb)

# Get an entry
e <- conn$getEntry('PR010001')

# Terminate instance.
mybiodb$terminate()

}
