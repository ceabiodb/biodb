% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BiodbConnBase.R
\docType{class}
\name{BiodbConnBase-class}
\alias{BiodbConnBase-class}
\alias{BiodbConnBase}
\title{Base class of \code{BiodbConn} for encapsulating all needed information for
database access.}
\description{
This is the base class for \code{BiodbConn} and \code{BiodbDbInfo}.
When defining a new connector class, your class must not inherit from
\code{BiodbBaseConn} but at least from \code{BiodbConn} (or
\code{BiodbRemoteConn} or any subclass of \code{BiodbConn}).
Its main purpose is to store property values. Those values are initialized
from YAML files. The default definition file is located inside the package
in "inst/definitions.yml" and is loaded at Biodb startup. However you can
define your own files and load them using the
\code{BiodbMain::loadDefinitions()} method.
}
\details{
Arguments to the contructor are:

other: Another object inheriting from \code{BiodbBaseConn}, and
from which property values will be copied.

db.class: The class of the database (\code{"mass.csv.file"},
\code{"comp.csv.file"}, ...).

properties: Some properties to set at initialization.
}
\section{Methods}{

\describe{
\item{\code{getBaseUrl()}}{Returns the base URL.}

\item{\code{getConnClass()}}{:

Gets the associated connector OOP class.
    
Returned value: Returns the connector OOP class.
    }

\item{\code{getConnClassName()}}{:

Gets the name of the associated connector OOP class.
    
Returned value: Returns the connector OOP class name.
    }

\item{\code{getDbClass()}}{:

Gets the Biodb name of the database associated with this connector.
    
Returned value: A character value containing the Biodb database name.
    }

\item{\code{getEntryClass()}}{:

Gets the associated entry class.
    
Returned value: Returns the associated entry class.
    }

\item{\code{getEntryClassName()}}{:

Gets the name of the associated entry class.
    
Returned value: Returns the name of the associated entry class.
    }

\item{\code{getEntryContentType()}}{Returns the entry content type.}

\item{\code{getEntryFileExt()}}{:

Returns the entry file extension used by this connector.
    
Returned value: A character value containing the file extension.
    }

\item{\code{getEntryIdField()}}{:

Gets the name of the corresponding database ID field in entries.
    
Returned value: Returns the name of the database ID field.
    }

\item{\code{getName()}}{Returns the full database name.}

\item{\code{getPropertyValue(name)}}{:

Gets a property value.
    
name: The name of the property.
    
Returned value: The value of the property.
    }

\item{\code{getPropSlots(name)}}{:

Gets the slot fields of a property.
    
name: The name of a property.
    
Returned value: Returns a character vector containing all slot names
    defined.}

\item{\code{getPropValSlot(name, slot)}}{:

Retrieve the value of a slot of a property.
    
name: The name of a property.
    
slot: The slot name inside the property.
    
Returned value: The value of the slot `slot` of the property `name`.
    }

\item{\code{getSchedulerNParam()}}{Returns the N parameter for the scheduler.}

\item{\code{getSchedulerTParam()}}{Returns the T parameter for the scheduler.}

\item{\code{getToken()}}{Returns the access token.}

\item{\code{getUrl(name)}}{Returns a URL.}

\item{\code{getUrls()}}{Returns the URLs.}

\item{\code{getWsUrl()}}{Returns the web sevices URL.}

\item{\code{getXmlNs()}}{Returns the XML namespace.}

\item{\code{hasProp(name)}}{:

Tests if this connector has a property.
    
name: The name of the property to check.
    
Returned value: Returns true if the property `name` exists.
    }

\item{\code{hasPropSlot(name, slot)}}{:

Tests if a slot property has a specific slot.
    
name: The name of a property.
    
slot: The slot name to check.
    
Returned value: Returns TRUE if the property `name` exists and has the
    slot `slot` defined, and FALSE otherwise.}

\item{\code{isSlotProp(name)}}{:

Tests if a property is a slot property.
    
name: The name of a property.
    
Returned value: Returns TRUE if the property is a slot propert, FALSE
    otherwise.}

\item{\code{propExists(name)}}{:

Checks if property exists.
    
name: The name of a property.
    
Returned value: Returns TRUE if the property `name` exists, and FALSE
    otherwise.}

\item{\code{setBaseUrl(url)}}{Sets the base URL.}

\item{\code{setPropertyValue(name, value)}}{:

Sets the value of a property.
    
name: The name of the property.
    
value: The new value to set the property to.
    
Returned value: None.
    }

\item{\code{setPropValSlot(name, slot, value)}}{:

Set the value of the slot of a property.
    
name: The name of the property.
    
slot: The name of the property's slot.
    
value: The new value to set the property's slot to.
    
Returned value: None.
    }

\item{\code{setSchedulerNParam(n)}}{Sets the N parameter for the scheduler.}

\item{\code{setSchedulerTParam(t)}}{Sets the T parameter for the scheduler.}

\item{\code{setToken(token)}}{Sets the access token.}

\item{\code{setUrl(name, url)}}{Returns a URL.}

\item{\code{setWsUrl(ws.url)}}{Sets the web sevices URL.}

\item{\code{updatePropertiesDefinition(def)}}{:

Update the definition of properties.
    
def: A named list of property definitions. The names of the list must be
    the property names.
    
Returned value: None.
    }
}}

\examples{
# Create an instance with default settings:
mybiodb <- biodb::BiodbMain()

# Accessing BiodbConnBase methods when using a BiodbDbInfo object
dbinf <- mybiodb$getDbsInfo()$get('comp.csv.file')

# Test if a property exists
dbinf$hasProp('name')

# Get a property value
dbinf$getPropertyValue('name')

# Get a property value slot
dbinf$getPropValSlot('urls', 'base.url')

# Terminate instance.
mybiodb$terminate()

}
\seealso{
Sub-classes \code{\link{BiodbDbInfo}} and \code{\link{BiodbConn}}.
}
