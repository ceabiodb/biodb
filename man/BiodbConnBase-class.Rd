% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BiodbConnBase.R
\docType{class}
\name{BiodbConnBase-class}
\alias{BiodbConnBase-class}
\alias{BiodbConnBase}
\title{Base class of \code{BiodbConn} for encapsulating all needed information for
database access.}
\description{
This is the base class for \code{BiodbConn} and \code{BiodbDbInfo}.
When defining a new connector class, your class must not inherit from
\code{BiodbBaseConn} but at least from \code{BiodbConn} (or
\code{BiodbRemoteConn} or any subclass of \code{BiodbConn}).
Its main purpose is to store property values. Those values are initialized
from YAML files. The default definition file is located inside the package
in "inst/definitions.yml" and is loaded at Biodb startup. However you can
define your own files and loaded them using the \code{Biodb::()} method.
}
\section{Fields}{

\describe{
\item{\code{db.class}}{The class of the database (\code{"massbank",
"hmdb.metabolies", ...}).}

\item{\code{properties}}{Some properties to set at initialization.}

\item{\code{other}}{Another object inheriting from \code{BiodbBaseConn}, and
from which property values will be copied.}
}}

\section{Methods}{

\describe{
\item{\code{getBaseUrl()}}{Returns the base URL.}

\item{\code{getConnClass()}}{Returns the associated connector OOP class.}

\item{\code{getConnClassName()}}{Returns the name of the associated connector OOP class.}

\item{\code{getEntryClass()}}{Returns the associated entry class.}

\item{\code{getEntryClassName()}}{Returns the name of the associated entry class.}

\item{\code{getEntryContentType()}}{Returns the entry content type.}

\item{\code{getEntryFileExt()}}{Returns the entry file extension.}

\item{\code{getEntryIdField()}}{Return the name of the corresponding database ID field in entries.}

\item{\code{getName()}}{Returns the full database name.}

\item{\code{getPropValSlot(name, slot)}}{Return the value of the slot "slot" of the property "name".}

\item{\code{getSchedulerNParam()}}{Returns the N parameter for the scheduler.}

\item{\code{getSchedulerTParam()}}{Returns the T parameter for the scheduler.}

\item{\code{getToken()}}{Returns the access token.}

\item{\code{getUrl(name)}}{Returns a URL.}

\item{\code{getUrls()}}{Returns the URLs.}

\item{\code{getWsUrl()}}{Returns the web sevices URL.}

\item{\code{getXmlNs()}}{Returns the XML namespace.}

\item{\code{hasProp(name)}}{Returns true if the property "name" exists.}

\item{\code{hasPropSlot(name, slot)}}{Returns true if the property "name" exists and has the slot "slot"
defined.}

\item{\code{setBaseUrl(url)}}{Sets the base URL.}

\item{\code{setSchedulerNParam(n)}}{Sets the N parameter for the scheduler.}

\item{\code{setSchedulerTParam(t)}}{Sets the T parameter for the scheduler.}

\item{\code{setToken(token)}}{Sets the access token.}

\item{\code{setUrl(name, url)}}{Returns a URL.}

\item{\code{setWsUrl(ws.url)}}{Sets the web sevices URL.}

\item{\code{updatePropertiesDefinition(def)}}{Update the definition of properties.}
}}

\examples{
# Create an instance with default settings:
mybiodb <- biodb::Biodb()

# Accessing BiodbConnBase methods when using a BiodbDbInfo object
dbinf <- mybiodb$getDbsInfo()$get('chebi')

# Test if a property exists
dbinf$hasProp('token')

# Get a property value
dbinf$getPropertyValue('name')

# Set a property value
dbinf$setPropertyValue('token', 'MyTokenValue')

# Get a property value slot
dbinf$getPropValSlot('urls', 'base.url')

# Terminate instance.
mybiodb$terminate()
mybiodb <- NULL

}
\seealso{
\code{\link{BiodbDbsInfo}}, \code{\link{BiodbConn}}.
}
