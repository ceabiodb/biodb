% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PeakforestCompoundConn.R
\docType{class}
\name{PeakforestCompoundConn-class}
\alias{PeakforestCompoundConn-class}
\alias{PeakforestCompoundConn}
\title{PeakForest Compound connector class.}
\description{
This is the connector class for PeakForest Compound database.
}
\section{Methods}{

\describe{
\item{\code{getEntryPageUrl(entry.id)}}{:

Gets the URL to the page of the entry on the database web site.
    
entry.id: A character vector with the IDs of entries to retrieve.
    
Returned value: A list of BiodbUrl objects, the same length as `entry.id`.
    }

\item{\code{searchCompound(name = NULL, mass = NULL, mass.field = NULL,
  mass.tol = 0.01, mass.tol.unit = "plain", max.results = NA_integer_)}}{Search for compounds by name and/or by mass. At least one of name or mass
    must be set.
    
name: The name of a compound to search for.
    
mass: The searched mass.
    
mass.field: For searching by mass, you must indicate a mass field to use
    ('monoisotopic.mass', 'molecular.mass', 'average.mass' or 'nominal.mass').
    
mass.tol: The tolerance value on the molecular mass.
    
mass.tol.unit: The type of mass tolerance. Either 'plain' or 'ppm'.
    
max.results: The maximum number of matches to return.
    
Returned value: A character vector of entry IDs.}

\item{\code{wsSearchCompoundsMass(field, mass, delta, max = NA_integer_,
  retfmt = c("plain", "request", "parsed", "ids"))}}{:

Calls the search/compounds web service.
    
field: The mass field to use for the search. One of 'monoisotopicmass' or
    'averagemass'.
    
mass: The mass to search for.
    
delta: The tolerance on the mass.
    
max: The maximum of matching entries to return.
    
retfmt: Use to set the format of the returned value. 'plain' will return
    the raw results from the server, as a character value. 'parsed' will return
    the parsed results, as a JSON object. 'request' will return a BiodbRequest
    object representing the request as it would have been sent. 'ids' will
    return a character vector containing the IDs of the matching entries.
    
Returned value: Depending on `retfmt` parameter.
    }
}}

\examples{
# Create an instance with default settings:
mybiodb <- biodb::Biodb()

# Create a connector
conn <- mybiodb$getFactory()$createConn('peakforest.compound')

# Get an entry
e <- conn$getEntry('1839')

# Terminate instance.
mybiodb$terminate()

}
