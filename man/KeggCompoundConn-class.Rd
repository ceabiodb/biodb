% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KeggCompoundConn.R
\docType{class}
\name{KeggCompoundConn-class}
\alias{KeggCompoundConn-class}
\alias{KeggCompoundConn}
\title{The connector class to KEGG Compound database.}
\description{
This is a concrete connector class. It must never be instantiated directly,
but instead be instantiated through the factory \code{\link{BiodbFactory}}.
Only specific methods are described here. See super classes for the
description of inherited methods.
}
\section{Methods}{

\describe{
\item{\code{addInfo(x, id.col, org, limit = 3, prefix = "")}}{:

Add informations (as new column appended to the end) to an existing
    data frame containing a column of KEGG Compound IDs.
    
x: A data frame containing at least one column with Biodb entry IDs
    identified by the parameter `id.col`.
    
id.col: The name of the column containing IDs inside the input data frame.
    
org: The organism in which to search for pathways, as a KEGG organism code
    (3-4 letters code, like 'hsa', 'mmu', ...). See
    https://www.genome.jp/kegg/catalog/org_list.html for a complete list of KEGG
    organism codes.
    
limit: This is the maximum number of values obtained for each ID, for
    every column added, in case multiple values are obtained. Set to 0 to get
    all values.
    
prefix: Insert a prefix at the start of name of all new columns.
    
Returned value: A data frame containing `x` and new columns appended with
    KEGG identifiers and data.
    }

\item{\code{getEntryImageUrl(entry.id)}}{:

Gets the URL to a picture of the entry (e.g.: a picture of the
    molecule in case of a compound entry).
    
entry.id: A character vector containing entry IDs.
    
Returned value: A character vector, the same length as `entry.id`,
    containing for each entry ID either a URL or NA if no URL exists.
    }

\item{\code{getModuleIdsPerCompound(id, org, limit = 3)}}{:

Gets organism modules for each compound. This method retrieves for
    each compound the KEGG modules of the organism in which the compound is
    involved.
    
id: A character vector of KEGG Compound IDs.
    
org: The organism in which to search for modules, as a KEGG organism code
    (3-4 letters code, like 'hsa', 'mmu', ...). See
    https://www.genome.jp/kegg/catalog/org_list.html for a complete list of KEGG
    organism codes.
    
limit: The maximum number of modules IDs to retrieve for each compound.
    Set to 0 to disable.
    
Returned value: A named list of KEGG module ID vectors, where the names
    of the list are the compound IDs.}

\item{\code{getPathwayIds(id, org)}}{:

Gets organism pathways. This method retrieves KEGG pathways of the
    specified organism in which the compounds are involved.
    
id: A character vector of KEGG Compound IDs.
    
org: The organism in which to search for pathways, as a KEGG organism code
    (3-4 letters code, like 'hsa', 'mmu', ...). See
    https://www.genome.jp/kegg/catalog/org_list.html for a complete list of KEGG
    organism codes.
    
Returned value: A vector of KEGG pathway IDs.
    }

\item{\code{getPathwayIdsPerCompound(id, org, limit = 3)}}{:

Gets organism pathways for each compound. This method retrieves for
    each compound the KEGG pathways of the organism in which the compound is
    involved.
    
id: A character vector of KEGG Compound IDs.
    
org: The organism in which to search for pathways, as a KEGG organism code
    (3-4 letters code, like 'hsa', 'mmu', ...). See
    https://www.genome.jp/kegg/catalog/org_list.html for a complete list of KEGG
    organism codes.
    
limit: The maximum number of modules IDs to retrieve for each compound.
    Set to 0 to disable.
    
Returned value: A named list of KEGG pathway ID vectors, where the names
    of the list are the compound IDs.}

\item{\code{searchCompound(name = NULL, mass = NULL, mass.field = NULL,
  mass.tol = 0.01, mass.tol.unit = "plain", max.results = NA_integer_)}}{Search for compounds by name and/or by mass. At least one of name or mass
    must be set.
    
name: The name of a compound to search for.
    
mass: The searched mass.
    
mass.field: For searching by mass, you must indicate a mass field to use
    ('monoisotopic.mass', 'molecular.mass', 'average.mass' or 'nominal.mass').
    
mass.tol: The tolerance value on the molecular mass.
    
mass.tol.unit: The type of mass tolerance. Either 'plain' or 'ppm'.
    
max.results: The maximum number of matches to return.
    
Returned value: A character vector of entry IDs.}

\item{\code{wsFindExactMass(mass = NA_real_, mass.min = NA_real_, mass.max = NA_real_,
  retfmt = c("plain", "request", "parsed", "ids"))}}{:

Searches for entries by mass.
    You must either provide a single mass through `mass` parameter or provide a
    range through `mass.min` and `mass.max`.
    See http://www.kegg.jp/kegg/docs/keggapi.html for details.
    
mass: Single mass.
    
mass.min: Minimal mass.
    
mass.max: Maximal mass.
    
retfmt: Set the format to use for the returned value. 'plain' will return the raw results from the server, as a character value. 'request' will return the request as it would have been sent, as a BiodbRequest object. 'parsed' will return a data frame. 'ids' will return a character vector containing the IDs of the matching entries.
    
Returned value: Depending on `retfmt`.
    }

\item{\code{wsFindMolecularWeight(mass = NA_real_, mass.min = NA_real_,
  mass.max = NA_real_, retfmt = c("plain", "request", "parsed", "ids"))}}{:

Searches for entries by molecular mass.
    You must either provide a single mass through `mass` parameter or provide a
    range through `mass.min` and `mass.max`.
    See http://www.kegg.jp/kegg/docs/keggapi.html for details.
    
mass: Single mass.
    
mass.min: Minimal mass.
    
mass.max: Maximal mass.
    
retfmt: Set the format to use for the returned value. 'plain' will return the raw results from the server, as a character value. 'request' will return the request as it would have been sent, as a BiodbRequest object. 'parsed' will return a data frame. 'ids' will return a character vector containing the IDs of the matching entries.
    
Returned value: Depending on `retfmt`.
    }
}}

\examples{
# Create an instance with default settings:
mybiodb <- biodb::Biodb()

# Create a connector to KEGG Compound
conn <- mybiodb$getFactory()$createConn('kegg.compound')

# Search for compounds by exact mass
conn$wsFindExactMass(mass=174.05, retfmt='parsed')

# Search for compounds by molecular weight 
conn$wsFindMolecularWeight(mass=300, retfmt='parsed')

# Get pathway IDs related to compounds
pathway.ids=conn$getPathwayIds(c('C02648', 'C06144'), org='mmu')

# Terminate instance.
mybiodb$terminate()

}
\seealso{
\code{\link{BiodbFactory}}, \code{\link{KeggConn}},
\code{\link{BiodbCompounddbConn}}, \code{\link{KeggPathwayConn}}.
}
