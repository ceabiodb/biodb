% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BiodbEntry.R
\name{BiodbEntry}
\alias{BiodbEntry}
\title{The mother abstract class of all database entry classes.}
\description{
The mother abstract class of all database entry classes.

The mother abstract class of all database entry classes.
}
\details{
An entry is an element of a database, identifiable by its accession number.
Each contains a list of fields defined by a name and a value. The details of
all fields that can be set into an entry are defined inside the class
\code{BiodbEntryFields}. From this class are derived other abstract classes
for different types of entry contents: \code{BiodbTxtEntry},
\code{BiodbXmlEntry}, \code{BiodbCsvEntry}, \code{BiodbJsonEntry} and
\code{BiodbHtmlEntry}. Then concrete classes are derived for each database:
\code{CompCsvEntry}, \code{MassCsvEntry}, etc. For biodb users, there is no
need to know this hierarchy; the knowledge of this class and its methods is
sufficient.
}
\examples{
# Create an instance with default settings:
mybiodb <- biodb::newInst()

# Get a compound CSV file database
chebi.tsv <- system.file("extdata", "chebi_extract.tsv", package='biodb')

# Get the connector of a compound database
conn <- mybiodb$getFactory()$createConn('comp.csv.file', url=chebi.tsv)

# Get an entry:
entry <- conn$getEntry(conn$getEntryIds(1))

# Get all defined fields:
entry$getFieldNames()

# Get a field value:
accession <- entry$getFieldValue('accession')

# Test if a field is defined:
if (entry$hasField('name'))
  print(paste("The entry's name is ", entry$getFieldValue('name'),
  '.', sep=''))

# Export an entry as a data frame:
df <- entry$getFieldsAsDataframe()

# You can set or reset a field's value:
entry$setFieldValue('mass', 1893.1883)

# Terminate instance.
mybiodb$terminate()

}
\seealso{
\code{\link{BiodbFactory}}, \code{\link{BiodbConn}},
\code{\link{BiodbEntryFields}}.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{BiodbEntry$new()}}
\item \href{#method-parentIsAConnector}{\code{BiodbEntry$parentIsAConnector()}}
\item \href{#method-getParent}{\code{BiodbEntry$getParent()}}
\item \href{#method-getBiodb}{\code{BiodbEntry$getBiodb()}}
\item \href{#method-cloneInstance}{\code{BiodbEntry$cloneInstance()}}
\item \href{#method-getId}{\code{BiodbEntry$getId()}}
\item \href{#method-isNew}{\code{BiodbEntry$isNew()}}
\item \href{#method-getDbClass}{\code{BiodbEntry$getDbClass()}}
\item \href{#method-setFieldValue}{\code{BiodbEntry$setFieldValue()}}
\item \href{#method-appendFieldValue}{\code{BiodbEntry$appendFieldValue()}}
\item \href{#method-getFieldNames}{\code{BiodbEntry$getFieldNames()}}
\item \href{#method-hasField}{\code{BiodbEntry$hasField()}}
\item \href{#method-removeField}{\code{BiodbEntry$removeField()}}
\item \href{#method-getFieldValue}{\code{BiodbEntry$getFieldValue()}}
\item \href{#method-getFieldsByType}{\code{BiodbEntry$getFieldsByType()}}
\item \href{#method-getFieldsAsDataframe}{\code{BiodbEntry$getFieldsAsDataframe()}}
\item \href{#method-getFieldsAsJson}{\code{BiodbEntry$getFieldsAsJson()}}
\item \href{#method-parseContent}{\code{BiodbEntry$parseContent()}}
\item \href{#method-computeFields}{\code{BiodbEntry$computeFields()}}
\item \href{#method-print}{\code{BiodbEntry$print()}}
\item \href{#method-getName}{\code{BiodbEntry$getName()}}
\item \href{#method-makesRefToEntry}{\code{BiodbEntry$makesRefToEntry()}}
\item \href{#method-getField}{\code{BiodbEntry$getField()}}
\item \href{#method-setField}{\code{BiodbEntry$setField()}}
\item \href{#method-getFieldClass}{\code{BiodbEntry$getFieldClass()}}
\item \href{#method-getFieldDef}{\code{BiodbEntry$getFieldDef()}}
\item \href{#method-getFieldCardinality}{\code{BiodbEntry$getFieldCardinality()}}
\item \href{#method-fieldHasBasicClass}{\code{BiodbEntry$fieldHasBasicClass()}}
\item \href{#method-setParent}{\code{BiodbEntry$setParent()}}
\item \href{#method-setAsNew}{\code{BiodbEntry$setAsNew()}}
\item \href{#method-clone}{\code{BiodbEntry$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$new(parent)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parentIsAConnector"></a>}}
\if{latex}{\out{\hypertarget{method-parentIsAConnector}{}}}
\subsection{Method \code{parentIsAConnector()}}{
Tests if the parent of this entry is a connector instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$parentIsAConnector()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if this entry belongs to a connector, FALSE
otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getParent"></a>}}
\if{latex}{\out{\hypertarget{method-getParent}{}}}
\subsection{Method \code{getParent()}}{
Returns the parent instance (A BiodbConn or BiodbFactory object) to
which this object is attached.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getParent()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A BiodbConn instance or a BiodbFactory object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getBiodb"></a>}}
\if{latex}{\out{\hypertarget{method-getBiodb}{}}}
\subsection{Method \code{getBiodb()}}{
Returns the biodb main class instance to which this object is
attached.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getBiodb()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The main biodb instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cloneInstance"></a>}}
\if{latex}{\out{\hypertarget{method-cloneInstance}{}}}
\subsection{Method \code{cloneInstance()}}{
Clones this entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$cloneInstance(db.class = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{db.class}}{The database class (the Biodb database ID) of the clone. By
setting this parameter, you can specify a different database for the clone,
so you may clone an entry into another database if you wish. By
default the class of the clone will be the same as the original entry.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The clone, as a new BiodbEntry instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getId"></a>}}
\if{latex}{\out{\hypertarget{method-getId}{}}}
\subsection{Method \code{getId()}}{
Gets the entry ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getId()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the entry ID, which is the value if the \code{accession} field.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isNew"></a>}}
\if{latex}{\out{\hypertarget{method-isNew}{}}}
\subsection{Method \code{isNew()}}{
Tests if this entry is new.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$isNew()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if this entry was newly created, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDbClass"></a>}}
\if{latex}{\out{\hypertarget{method-getDbClass}{}}}
\subsection{Method \code{getDbClass()}}{
Gets the ID of the database associated with this entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getDbClass()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The name of the database class associated with this entry.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setFieldValue"></a>}}
\if{latex}{\out{\hypertarget{method-setFieldValue}{}}}
\subsection{Method \code{setFieldValue()}}{
Sets the value of a field. If the field is not already set for this
entry, then the field will be created. See BiodbEntryFields for a list of
possible fields in biodb.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$setFieldValue(field, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field}}{The name of a field.}

\item{\code{value}}{The value to set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-appendFieldValue"></a>}}
\if{latex}{\out{\hypertarget{method-appendFieldValue}{}}}
\subsection{Method \code{appendFieldValue()}}{
Appends a value to an existing field. If the field is not defined for
this entry, then the field will be created and set to this value. Only
fields with a cardinality greater than one can accept multiple values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$appendFieldValue(field, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field}}{The name of a field.}

\item{\code{value}}{The value to append.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldNames"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldNames}{}}}
\subsection{Method \code{getFieldNames()}}{
Gets a list of all fields defined for this entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldNames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector containing all field names defined in
this entry.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hasField"></a>}}
\if{latex}{\out{\hypertarget{method-hasField}{}}}
\subsection{Method \code{hasField()}}{
Tests if a field is defined in this entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$hasField(field)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field}}{The name of a field.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the specified field is defined in this entry,
FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-removeField"></a>}}
\if{latex}{\out{\hypertarget{method-removeField}{}}}
\subsection{Method \code{removeField()}}{
Removes the specified field from this entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$removeField(field)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field}}{The name of a field.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldValue"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldValue}{}}}
\subsection{Method \code{getFieldValue()}}{
Gets the value of the specified field.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldValue(
  field,
  compute = TRUE,
  flatten = FALSE,
  last = FALSE,
  limit = 0,
  withNa = TRUE,
  duplicatedValues = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field}}{The name of a field.}

\item{\code{compute}}{If set to TRUE and a field is not defined, try to compute it
using internal defined computing rules. If set to FALSE, let the field
undefined.}

\item{\code{flatten}}{If set to TRUE and a field's value is a vector of more than one
element, then export the field's value as a single string composed of the
field's value concatenated and separated by the character defined in the
'multival.field.sep' config key. If set to FALSE or the field contains only
one value, changes nothing.}

\item{\code{last}}{If set to TRUE and a field's value is a vector of more than one
element, then export only the last value. If set to FALSE, changes nothing.}

\item{\code{limit}}{The maximum number of values to get in case the field contains more
than one value.}

\item{\code{withNa}}{If set to TRUE, keep NA values. Otherwise filter out NAs values in
vectors.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value of the field.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldsByType"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldsByType}{}}}
\subsection{Method \code{getFieldsByType()}}{
Gets the fields of this entry that have the specified type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldsByType(type)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector containing the field names."
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldsAsDataframe"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldsAsDataframe}{}}}
\subsection{Method \code{getFieldsAsDataframe()}}{
Converts this entry into a data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldsAsDataframe(
  only.atomic = TRUE,
  compute = TRUE,
  fields = NULL,
  fields.type = NULL,
  flatten = TRUE,
  limit = 0,
  only.card.one = FALSE,
  own.id = TRUE,
  duplicate.rows = TRUE,
  sort = FALSE,
  virtualFields = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{only.atomic}}{If set to TRUE, only export field's values that are atomic}

\item{\code{compute}}{If set to TRUE and a field is not defined, try to compute it
using internal defined computing rules. If set to FALSE, let the field
undefined.}

\item{\code{fields}}{Set to character vector of field names in order to restrict
execution to this set of fields.}

\item{\code{fields.type}}{If set, output all the fields of the specified type.}

\item{\code{flatten}}{If set to TRUE and a field's value is a vector of more than one
element, then export the field's value as a single string composed of the
field's value concatenated and separated by the character defined in the
'multival.field.sep' config key. If set to FALSE or the field contains only
one value, changes nothing.}

\item{\code{limit}}{The maximum number of field values to write into new columns. Used
for fields that can contain more than one value.}

\item{\code{only.card.one}}{If set to TRUE, only fields with a cardinality of one will
be extracted.}

\item{\code{own.id}}{If set to TRUE includes the database id field named
\verb{<database_name>.id} whose values are the same as the \code{accession} field.}

\item{\code{duplicate.rows}}{If set to TRUE and merging field values with cardinality
greater than one, values will be duplicated.}

\item{\code{sort}}{If set to TRUE sort the order of columns alphabetically, otherwise
do not sort.}

\item{\code{virtualFields}}{If set to TRUE includes also virtual fields, otherwise
excludes them.}

\item{\code{(i.e.}}{of type vector).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame containg the values of the fields.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldsAsJson"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldsAsJson}{}}}
\subsection{Method \code{getFieldsAsJson()}}{
Converts this entry into a JSON string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldsAsJson(compute = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{compute}}{If set to TRUE and a field is not defined, try to compute it
using internal defined computing rules. If set to FALSE, let the field
undefined.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A JSON object from jsonlite package.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parseContent"></a>}}
\if{latex}{\out{\hypertarget{method-parseContent}{}}}
\subsection{Method \code{parseContent()}}{
Parses content string and set values accordingly for this entry's
fields.  This method is called automatically and should be run directly by
users.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$parseContent(content)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content}}{A character string containing definition for an entry and}

\item{\code{obtained}}{from a database. The format can be CSV, HTML, JSON, XML, or just
text.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-computeFields"></a>}}
\if{latex}{\out{\hypertarget{method-computeFields}{}}}
\subsection{Method \code{computeFields()}}{
Computes fields. Look at all missing fields, and try to compute them
using references to other databases, if a rule exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$computeFields(fields = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fields}}{A list of fields to review for computing. By default all fields
will be reviewed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if at least one field was computed successfully,
FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Displays short information about this instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getName"></a>}}
\if{latex}{\out{\hypertarget{method-getName}{}}}
\subsection{Method \code{getName()}}{
Gets a short text describing this entry instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character value concatenating the connector name with
the entry accession.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-makesRefToEntry"></a>}}
\if{latex}{\out{\hypertarget{method-makesRefToEntry}{}}}
\subsection{Method \code{makesRefToEntry()}}{
Tests if this entry makes reference to another entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$makesRefToEntry(db, oid, recurse = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{db}}{Another database connector.}

\item{\code{oid}}{A entry ID from database db.}

\item{\code{recurse}}{If set to TRUE, the algorithm will follow all references to
entries from other databases, to see if it can establish an indirect link
to \code{oid}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if this entry makes reference to the entry oid from
database db, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getField"></a>}}
\if{latex}{\out{\hypertarget{method-getField}{}}}
\subsection{Method \code{getField()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getField(field)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setField"></a>}}
\if{latex}{\out{\hypertarget{method-setField}{}}}
\subsection{Method \code{setField()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$setField(field, value)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldClass"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldClass}{}}}
\subsection{Method \code{getFieldClass()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldClass(field)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldDef"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldDef}{}}}
\subsection{Method \code{getFieldDef()}}{
Gets the definition of an entry field.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldDef(field)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field}}{The name of the field.}

\item{\code{return}}{A object BiodbEntryField which defines the field.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldCardinality"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldCardinality}{}}}
\subsection{Method \code{getFieldCardinality()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$getFieldCardinality(field)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fieldHasBasicClass"></a>}}
\if{latex}{\out{\hypertarget{method-fieldHasBasicClass}{}}}
\subsection{Method \code{fieldHasBasicClass()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$fieldHasBasicClass(field)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setParent"></a>}}
\if{latex}{\out{\hypertarget{method-setParent}{}}}
\subsection{Method \code{setParent()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$setParent(parent)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setAsNew"></a>}}
\if{latex}{\out{\hypertarget{method-setAsNew}{}}}
\subsection{Method \code{setAsNew()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$setAsNew(isNew)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbEntry$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
