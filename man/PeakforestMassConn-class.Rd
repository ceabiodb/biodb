% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PeakforestMassConn.R
\docType{class}
\name{PeakforestMassConn-class}
\alias{PeakforestMassConn-class}
\alias{PeakforestMassConn}
\title{PeakForest Mass connector class.}
\description{
This is the connector class for PeakForest Mass database.
}
\section{Methods}{

\describe{
\item{\code{getChromCol(ids = NULL)}}{:

Gets a list of chromatographic columns contained in this database.
    
ids: A character vector of entry identifiers (i.e.: accession numbers).
    Used to restrict the set of entries on which to run the algorithm.
    
Returned value : A data.frame with two columns, one for the ID 'id' and
    another one for the title 'title'.
    }

\item{\code{getEntryPageUrl(entry.id)}}{:

Gets the URL to the page of the entry on the database web site.
    
entry.id: A character vector with the IDs of entries to retrieve.
    
Returned value: A list of BiodbUrl objects, the same length as `entry.id`.
    }

\item{\code{wsLcmsmsFromPrecursor(prec.mz, precursorMassDelta, mode = NA_character_,
  retfmt = c("plain", "request", "parsed", "ids"))}}{:

Calls the spectra/lcmsms/from-precursor web service to search for
    spectra containing a specific precursor peak.
    
prec.mz: M/Z value of the precursor.
    
precursorMassDelta: The tolerance of the precursor M/Z value.
    
mode: The MS mode: either 'NEG' or 'POS'. If unset, the search will be
    made on both modes.
    
retfmt: Use to set the format of the returned value. 'plain' will return
    the raw results from the server, as a character value. 'parsed' will return
    the parsed results, as a JSON object. 'request' will return a BiodbRequest
    object representing the request as it would have been sent. 'ids' will
    return a character vector containing the IDs of the matching entries.
    
Returned value: Depending on `retfmt` parameter.
    }

\item{\code{wsListCodeColumns(retfmt = c("plain", "request", "parsed", "data.frame"))}}{:

Calls the metadata/lc/list-code-columns web service to get a list of
    available chromatographic columns.
    
retfmt: Use to set the format of the returned value. 'plain' will return
    the raw results from the server, as a character value. 'parsed' will return
    the parsed results, as a JSON object. 'request' will return a BiodbRequest
    object representing the request as it would have been sent. 'data.frame'
    will return a data frame.
    
Returned value: Depending on `retfmt` parameter.
    }

\item{\code{wsPeaksGetRange(type = c("lcms", "lcmsms"), mz.min, mz.max,
  mode = NA_character_, retfmt = c("plain", "request", "parsed", "ids"))}}{:

Calls the spectra/<type>/peaks/get-range web service to search for
    spectra containing at least one peak whose M/Z value is inside a range.
    
type: The type of mass database: either 'lcms' or 'lcmsms'.
    
mz.min: The minimum M/Z value to search for.
    
mz.max: The maximum M/Z value to search for.
    
mode: The MS mode: either 'NEG' or 'POS'. If unset, the search will be
    made on both modes.
    
retfmt: Use to set the format of the returned value. 'plain' will return
    the raw results from the server, as a character value. 'parsed' will return
    the parsed results, as a JSON object. 'request' will return a BiodbRequest
    object representing the request as it would have been sent. 'ids' will
    return a character vector containing the IDs of the matching entries.
    
Returned value: Depending on `retfmt` parameter.
    }
}}

\examples{
# Create an instance with default settings:
mybiodb <- biodb::Biodb()

# Create a connector
conn <- mybiodb$getFactory()$createConn('peakforest.mass')

# Get an entry
e <- conn$getEntry('1000')

# Terminate instance.
mybiodb$terminate()

}
