% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BiodbMain.R
\name{BiodbMain}
\alias{BiodbMain}
\title{The central class of the biodb package.}
\description{
The central class of the biodb package.

The central class of the biodb package.
}
\details{
The main class of the \code{biodb} package.
In order to use the biodb package, you need first to create an instance of
this class.

The constructor takes a single argument, \code{autoloadExtraPkgs}, to enable
(\code{TRUE} or default) or disable (\code{FALSE}) autoloading of extra
biodb packages.

Once the instance is created, some other important classes
(\code{BiodbFactory}, \code{BiodbPersistentCache}, \code{BiodbConfig}, ...)
are instantiated (just once) and their instances are later accessible through
get*() methods.
}
\examples{
# Create an instance:
mybiodb <- biodb::newInst()

# Get the factory instance
fact <- mybiodb$getFactory()

# Terminate instance.
mybiodb$terminate()
mybiodb <- NULL

}
\seealso{
\code{\link{BiodbFactory}}, \code{\link{BiodbPersistentCache}},
\code{\link{BiodbConfig}}, \code{\link{BiodbEntryFields}},
\code{\link{BiodbDbsInfo}}.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{BiodbMain$new()}}
\item \href{#method-terminate}{\code{BiodbMain$terminate()}}
\item \href{#method-loadDefinitions}{\code{BiodbMain$loadDefinitions()}}
\item \href{#method-getConfig}{\code{BiodbMain$getConfig()}}
\item \href{#method-getPersistentCache}{\code{BiodbMain$getPersistentCache()}}
\item \href{#method-getDbsInfo}{\code{BiodbMain$getDbsInfo()}}
\item \href{#method-getEntryFields}{\code{BiodbMain$getEntryFields()}}
\item \href{#method-getFactory}{\code{BiodbMain$getFactory()}}
\item \href{#method-getRequestScheduler}{\code{BiodbMain$getRequestScheduler()}}
\item \href{#method-addObservers}{\code{BiodbMain$addObservers()}}
\item \href{#method-getObservers}{\code{BiodbMain$getObservers()}}
\item \href{#method-convertEntryIdFieldToDbClass}{\code{BiodbMain$convertEntryIdFieldToDbClass()}}
\item \href{#method-entriesFieldToVctOrLst}{\code{BiodbMain$entriesFieldToVctOrLst()}}
\item \href{#method-entriesToDataframe}{\code{BiodbMain$entriesToDataframe()}}
\item \href{#method-entryIdsToDataframe}{\code{BiodbMain$entryIdsToDataframe()}}
\item \href{#method-addColsToDataframe}{\code{BiodbMain$addColsToDataframe()}}
\item \href{#method-entriesToJson}{\code{BiodbMain$entriesToJson()}}
\item \href{#method-collapseRows}{\code{BiodbMain$collapseRows()}}
\item \href{#method-entriesToSingleFieldValues}{\code{BiodbMain$entriesToSingleFieldValues()}}
\item \href{#method-entryIdsToSingleFieldValues}{\code{BiodbMain$entryIdsToSingleFieldValues()}}
\item \href{#method-computeFields}{\code{BiodbMain$computeFields()}}
\item \href{#method-saveEntriesAsJson}{\code{BiodbMain$saveEntriesAsJson()}}
\item \href{#method-copyDb}{\code{BiodbMain$copyDb()}}
\item \href{#method-print}{\code{BiodbMain$print()}}
\item \href{#method-fieldIsAtomic}{\code{BiodbMain$fieldIsAtomic()}}
\item \href{#method-getFieldClass}{\code{BiodbMain$getFieldClass()}}
\item \href{#method-clone}{\code{BiodbMain$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$new(autoloadExtraPkgs = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-terminate"></a>}}
\if{latex}{\out{\hypertarget{method-terminate}{}}}
\subsection{Method \code{terminate()}}{
Closes \\code{BiodbMain} instance. Call this method when you are done
with your \\code{BiodbMain} instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$terminate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-loadDefinitions"></a>}}
\if{latex}{\out{\hypertarget{method-loadDefinitions}{}}}
\subsection{Method \code{loadDefinitions()}}{
Loads databases and entry fields definitions from YAML file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$loadDefinitions(file, package = "biodb")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The path to a YAML file containing definitions for \\code{BiodbMain}
(databases, fields or configuration keys).}

\item{\code{package}}{The package to which belong the new definitions.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getConfig"></a>}}
\if{latex}{\out{\hypertarget{method-getConfig}{}}}
\subsection{Method \code{getConfig()}}{
Returns the single instance of the \\code{BiodbConfig} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getConfig()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The instance of the \\code{BiodbConfig} class attached to
this BiodbMain instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getPersistentCache"></a>}}
\if{latex}{\out{\hypertarget{method-getPersistentCache}{}}}
\subsection{Method \code{getPersistentCache()}}{
Returns the single instance of the BiodbPersistentCache class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getPersistentCache()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The instance of the BiodbPersistentCache class attached to
this BiodbMain instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDbsInfo"></a>}}
\if{latex}{\out{\hypertarget{method-getDbsInfo}{}}}
\subsection{Method \code{getDbsInfo()}}{
Returns the single instance of the \\code{BiodbDbsInfo} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getDbsInfo()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The instance of the \\code{BiodbDbsInfo} class attached to
this BiodbMain instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getEntryFields"></a>}}
\if{latex}{\out{\hypertarget{method-getEntryFields}{}}}
\subsection{Method \code{getEntryFields()}}{
Returns the single instance of the \\code{BiodbEntryFields} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getEntryFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The instance of the \\code{BiodbEntryFields} class
attached to this BiodbMain instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFactory"></a>}}
\if{latex}{\out{\hypertarget{method-getFactory}{}}}
\subsection{Method \code{getFactory()}}{
Returns the single instance of the \\code{BiodbFactory} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getFactory()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The instance of the \\code{BiodbFactory} class attached to
this BiodbMain instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getRequestScheduler"></a>}}
\if{latex}{\out{\hypertarget{method-getRequestScheduler}{}}}
\subsection{Method \code{getRequestScheduler()}}{
Returns the single instance of the \\code{BiodbRequestScheduler}
class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getRequestScheduler()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The instance of the \\code{BiodbRequestScheduler} class
attached to this BiodbMain instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addObservers"></a>}}
\if{latex}{\out{\hypertarget{method-addObservers}{}}}
\subsection{Method \code{addObservers()}}{
Adds new observers. Observers will be called each time an event
occurs. This is the way used in biodb to get feedback about what is going
inside biodb code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$addObservers(observers)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{observers}}{Either an object or a list of objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getObservers"></a>}}
\if{latex}{\out{\hypertarget{method-getObservers}{}}}
\subsection{Method \code{getObservers()}}{
Gets the list of registered observers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getObservers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The list or registered observers.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-convertEntryIdFieldToDbClass"></a>}}
\if{latex}{\out{\hypertarget{method-convertEntryIdFieldToDbClass}{}}}
\subsection{Method \code{convertEntryIdFieldToDbClass()}}{
Gets the database class name corresponding to an entry ID field.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$convertEntryIdFieldToDbClass(entry.id.field)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entry.id.field}}{The name of an ID field. It must end with \".id\".}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entriesFieldToVctOrLst"></a>}}
\if{latex}{\out{\hypertarget{method-entriesFieldToVctOrLst}{}}}
\subsection{Method \code{entriesFieldToVctOrLst()}}{
Extracts the value of a field from a list of entries. Returns either a
vector or a list depending on the type of the field.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$entriesFieldToVctOrLst(
  entries,
  field,
  flatten = FALSE,
  compute = TRUE,
  limit = 0,
  withNa = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entries}}{A list of \\code{BiodbEntry} instances.}

\item{\code{field}}{The name of a field.}

\item{\code{flatten}}{If set to \\code{TRUE} and the field has a cardinality greater
than one, then values be converted into a vector of class character in which
each entry values are collapsed.}

\item{\code{compute}}{If set to \\code{TRUE}, computable fields will be output.}

\item{\code{limit}}{The maximum number of values to retrieve for each entry. Set to 0
to get all values.}

\item{\code{withNa}}{If set to TRUE, keep NA values. Otherwise filter out NAs values in
vectors.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A vector if the field is atomic or flatten is set to
\\code{TRUE}, otherwise a list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entriesToDataframe"></a>}}
\if{latex}{\out{\hypertarget{method-entriesToDataframe}{}}}
\subsection{Method \code{entriesToDataframe()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$entriesToDataframe(
  entries,
  only.atomic = TRUE,
  null.to.na = TRUE,
  compute = TRUE,
  fields = NULL,
  limit = 0,
  drop = FALSE,
  sort.cols = FALSE,
  flatten = TRUE,
  only.card.one = FALSE,
  own.id = TRUE,
  prefix = ""
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entryIdsToDataframe"></a>}}
\if{latex}{\out{\hypertarget{method-entryIdsToDataframe}{}}}
\subsection{Method \code{entryIdsToDataframe()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$entryIdsToDataframe(
  ids,
  db,
  fields = NULL,
  limit = 3,
  prefix = "",
  own.id = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addColsToDataframe"></a>}}
\if{latex}{\out{\hypertarget{method-addColsToDataframe}{}}}
\subsection{Method \code{addColsToDataframe()}}{
Using
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$addColsToDataframe(x, id.col, db, fields, limit = 3, prefix = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{A data frame containing at least one column with Biodb entry IDs
identified by the parameter \code{id.col}.}

\item{\code{id.col}}{The name of the column containing IDs inside the input data frame.}

\item{\code{db}}{The biodb database name for the entry IDs, or a connector ID, as a
sinle character value.}

\item{\code{fields}}{A character vector containing entry fields to add.}

\item{\code{limit}}{The maximum number of field values to write into new columns. Used
for fields that can contain more than one value. Set it to 0 to get all
values.}

\item{\code{prefix}}{Insert a prefix at the start of all field names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame containing \code{x} and new columns appended for
the fields requested.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entriesToJson"></a>}}
\if{latex}{\out{\hypertarget{method-entriesToJson}{}}}
\subsection{Method \code{entriesToJson()}}{
Converts a list of \\code{BiodbEntry} objects into JSON. Returns a
vector of characters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$entriesToJson(entries, compute = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entries}}{A list of \\code{BiodbEntry} instances. It may contain NULL
elements.}

\item{\code{compute}}{If set to \\code{TRUE}, computable fields will added to JSON too.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of JSON strings, the same length as entries list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-collapseRows"></a>}}
\if{latex}{\out{\hypertarget{method-collapseRows}{}}}
\subsection{Method \code{collapseRows()}}{
Collapses rows of a data frame, by looking for duplicated values in
the reference columns (parameter \code{cols}). The values contained in the
reference columns are supposed to be ordered inside the data frame, in the
sens that all duplicated values are supposed to directly follow the
original values.  For all rows containing duplicated values, we look at
values in all other columns and concatenate values in each column
containing different values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$collapseRows(x, sep = "|", cols = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{A data frame.}

\item{\code{sep}}{The separator to use when concatenating values in collapsed rows.}

\item{\code{cols}}{The indices or the names of the columns used as reference.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame, with rows collapsed."
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entriesToSingleFieldValues"></a>}}
\if{latex}{\out{\hypertarget{method-entriesToSingleFieldValues}{}}}
\subsection{Method \code{entriesToSingleFieldValues()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$entriesToSingleFieldValues(
  entries,
  field,
  sortOutput = FALSE,
  uniq = TRUE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entryIdsToSingleFieldValues"></a>}}
\if{latex}{\out{\hypertarget{method-entryIdsToSingleFieldValues}{}}}
\subsection{Method \code{entryIdsToSingleFieldValues()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$entryIdsToSingleFieldValues(
  ids,
  db,
  field,
  sortOutput = FALSE,
  uniq = TRUE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-computeFields"></a>}}
\if{latex}{\out{\hypertarget{method-computeFields}{}}}
\subsection{Method \code{computeFields()}}{
Computes missing fields in entries, for those fields that are
comptable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$computeFields(entries)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entries}}{A list of \\code{BiodbEntry} instances. It may contain NULL
elements.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-saveEntriesAsJson"></a>}}
\if{latex}{\out{\hypertarget{method-saveEntriesAsJson}{}}}
\subsection{Method \code{saveEntriesAsJson()}}{
Saves a list of entries in JSON format. Each entry will be saved in a
separate file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$saveEntriesAsJson(entries, files, compute = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entries}}{A list of \\code{BiodbEntry} instances. It may contain NULL
elements.}

\item{\code{files}}{A character vector of file paths, the same length as entries list.}

\item{\code{compute}}{If set to \\code{TRUE}, computable fields will be saved too.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-copyDb"></a>}}
\if{latex}{\out{\hypertarget{method-copyDb}{}}}
\subsection{Method \code{copyDb()}}{
Copies all entries of a database into another database. The connector
of the destination database must be editable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$copyDb(conn.from, conn.to, limit = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{conn.from}}{The connector of the source datababase to copy.}

\item{\code{conn.to}}{The connector of the destination database.}

\item{\code{limit}}{The number of entries of the source database to copy. If set to
\\code{NULL}, copy the whole database.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Prints object information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fieldIsAtomic"></a>}}
\if{latex}{\out{\hypertarget{method-fieldIsAtomic}{}}}
\subsection{Method \code{fieldIsAtomic()}}{
DEPRECATED method to test if a field is an atomic field. The new
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$fieldIsAtomic(field)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{is \\code{BiodbEntryField :isVector()}."}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFieldClass"></a>}}
\if{latex}{\out{\hypertarget{method-getFieldClass}{}}}
\subsection{Method \code{getFieldClass()}}{
DEPRECATED method to get the class of a field. The new method is
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$getFieldClass(field)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{\\code{BiodbMain}}{:getEntryFields()$get(field)$getClass()}."}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BiodbMain$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
