% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Biodb.R
\docType{class}
\name{Biodb-class}
\alias{Biodb-class}
\alias{Biodb}
\title{The central class of the biodb package.}
\description{
The main class of the \code{biodb} package.
In order to use the biodb package, you need first to create an instance of
this class.
}
\details{
The constructor takes no argument.

Once the instance is created, some other important classes
(\code{BiodbFactory}, \code{BiodbCache}, \code{BiodbConfig}, ...) are
instantiated (just once) and their instances are later accessible through
get*() methods.
}
\section{Methods}{

\describe{
\item{\code{addColsToDataframe(x, id.col, db, fields, limit = 3, prefix = "")}}{:

Using 
    
x: A data frame containing at least one column with Biodb entry IDs
    identified by the parameter `id.col`.
    
id.col: The name of the column containing IDs inside the input data frame.
    
db: The biodb database name for the entry IDs, or a connector ID, as a
    sinle character value.
    
fields: A character vector containing entry fields to add.
    
limit: The maximum number of field values to write into new columns. Used
    for fields that can contain more than one value. Set it to 0 to get all
    values.
    
prefix: Insert a prefix at the start of all field names.
    
Returned value: A data frame containing `x` and new columns appended for
    the fields requested.
    }

\item{\code{addObservers(observers)}}{:

Adds new observers. Observers will be called each time an event occurs.
    This is the way used in biodb to get feedback about what is going inside
    biodb code.
    
observers: Either a \code{BiodbObserver} instance or a list of
    \code{BiodbObserver} instances.
    
Returned value: None.
    }

\item{\code{collapseRows(x, sep = "|", cols = 1L)}}{:

Collapses rows of a data frame, by looking for duplicated values in the
    reference columns (parameter `cols`). The values contained in the reference
    columns are supposed to be ordered inside the data frame, in the sens that
    all duplicated values are supposed to directly follow the original values.
    For all rows containing duplicated values, we look at values in all other
    columns and concatenate values in each column containing different values.
    
x: A data frame.
    
cols: The indices or the names of the columns used as reference.
    
sep: The separator to use when concatenating values in collapsed rows.
    
Returned value: A data frame, with rows collapsed.}

\item{\code{computeFields(entries)}}{:

Computes missing fields in entries, for those fields that are
    comptable.
    
entries: A list of \code{BiodbEntry} instances.
    
Returned value: None.
    }

\item{\code{convertEntryIdFieldToDbClass(entry.id.field)}}{:

Gets the database class name corresponding to an entry ID field.
    
entry.id.field: The name of an ID field. It must end with ".id".
    }

\item{\code{copyDb(conn.from, conn.to, limit = NULL)}}{:

Copies all entries of a database into another database. The connector
    of the destination database must be editable.
    
conn.from: The connector of the source datababase to copy.
    
conn.to: The connector of the destination database.
    
limit: The number of entries of the source database to copy. If set to
    \code{NULL}, copy the whole database.
    
Returned value: None.
    }

\item{\code{entriesFieldToVctOrLst(entries, field, flatten = FALSE, compute = TRUE,
  limit = 0, withNa = TRUE)}}{:

Extracts the value of a field from a list of entries. Returns either a
    vector or a list depending on the type of the field.
    
entries: A list of \code{Biodb} entries.
    
field: The name of a field.
    
flatten: If set to \code{TRUE} and the field has a cardinality greater
    than one, then values be converted into a vector of class character in which
    each entry values are collapsed.
    
compute: If set to \code{TRUE}, computable fields will be output.
    
limit: The maximum number of values to retrieve for each entry. Set to 0
    to get all values.
    
withNa: If set to TRUE, keep NA values. Otherwise filter out NAs values in
    vectors.
    
Returned value: A vector if the field is atomic or flatten is set to
    \code{TRUE}, otherwise a list.
    }

\item{\code{entriesToDataframe(entries, only.atomic = TRUE, null.to.na = TRUE,
  compute = TRUE, fields = NULL, limit = 0, drop = FALSE,
  sort.cols = FALSE, flatten = TRUE, only.card.one = FALSE,
  own.id = TRUE, prefix = "")}}{:

Converts a list of entries or a list of list of entries
    (\code{BiodbEntry} objects) into a data frame.
    
entries: A list of \code{BiodbEntry} instances or a list of list of
    \code{BiodbEntry} instances.
    
only.atomic: If set to \code{TRUE}, output only atomic fields, i.e.: the
    fields whose value type is one of integer, numeric, logical or character.
    
null.to.na: If set to \code{TRUE}, each \code{NULL} entry in the list is
    converted into a row of NA values.
    
compute: If set to \code{TRUE}, computable fields will be output.
    
fields: A character vector of field names to output. The data frame output
    will be restricted to this list of fields.
    
limit: The maximum number of field values to write into new columns. Used
    for fields that can contain more than one value. Set it to 0 to get all
    values.
    
drop: If set to \code{TRUE} and the resulting data frame has only one
    column, a vector will be output instead of data frame.
    
sort.cols: Sort columns in alphabetical order.
    
flatten: If set to \code{TRUE}, then each field with a cardinality
    greater than one, will be converted into a vector of class character whose
    values are collapsed.
    
only.card.one: Output only fields whose cardinality is one.
    
own.id: If set to TRUE includes the database id field named
    `<database_name>.id` whose values are the same as the `accession` field.
    
prefix: Insert a prefix at the start of all field names.
    
Returned value: A data frame containing the entries. Columns are named
    according to field names.
    }

\item{\code{entriesToJson(entries, compute = TRUE)}}{:

Converts a list of \code{BiodbEntry} objects into JSON. Returns a
    vector of characters.
    
entries: A list of \code{BiodbEntry} instances.
    
compute: If set to \code{TRUE}, computable fields will added to JSON too.
    
Returned value: A list of JSON strings, the same length as entries list.
    }

\item{\code{entryIdsToDataframe(ids, db, fields = NULL, limit = 3, prefix = "",
  own.id = FALSE)}}{:

Construct a data frame using entry IDs and field values of the
    corresponding entries.
    
ids: A character vector of entry IDs or a list of character vectors of
    entry IDs.
    
db: The biodb database name for the entry IDs, or a connector ID, as a
    sinle character value.
    
fields: A character vector containing entry fields to add.
    
limit: The maximum number of field values to write into new columns. Used
    for fields that can contain more than one value. Set it to 0 to get all
    values.
    
own.id: If set to TRUE includes the database id field named
    `<database_name>.id` whose values are the same as the `accession` field.
    
prefix: Insert a prefix at the start of all field names.
    
Returned value: A data frame containing in columns the requested field
    values, with one entry per line, in the same order than in `ids` vector.
    }

\item{\code{fieldIsAtomic(field)}}{:

DEPRECATED method to test if a field is an atomic field. The new
    method is \code{BiodbEntryField::isVector()}.}

\item{\code{getCache()}}{:

Returns the single instance of the \code{BiodbCache} class.
    
Returned value: The instance of the \code{BiodbCache} class attached to
    this Biodb instance.
    }

\item{\code{getConfig()}}{:

Returns the single instance of the \code{BiodbConfig} class.
    
Returned value: The instance of the \code{BiodbConfig} class attached to
    this Biodb instance.
    }

\item{\code{getDbsInfo()}}{:

Returns the single instance of the \code{BiodbDbsInfo} class.
    
Returned value: The instance of the \code{BiodbDbsInfo} class attached to
    this Biodb instance.
    }

\item{\code{getEntryFields()}}{:

Returns the single instance of the \code{BiodbEntryFields} class.
    
Returned value: The instance of the \code{BiodbEntryFields} class
    attached to this Biodb instance.
    }

\item{\code{getFactory()}}{:

Returns the single instance of the \code{BiodbFactory} class.
    
Returned value: The instance of the \code{BiodbFactory} class attached to
    this Biodb instance.
    }

\item{\code{getFieldClass(field)}}{:

DEPRECATED method to get the class of a field. The new method is
    \code{Biodb::getEntryFields()$get(field)$getClass()}.}

\item{\code{getObservers()}}{:

Gets the list of registered observers.
    
Returned value: The list or registered observers.
    }

\item{\code{getRequestScheduler()}}{:

Returns the single instance of the \code{BiodbRequestScheduler} class.
    
Returned value: The instance of the \code{BiodbRequestScheduler} class
    attached to this Biodb instance.
    }

\item{\code{loadDefinitions(file)}}{:

Loads databases and entry fields definitions from YAML file.
    
file: The path to a YAML file containing definitions for \code{Biodb}
    (databases, fields or configuration keys).
    
Returned value: None.
    }

\item{\code{saveEntriesAsJson(entries, files, compute = TRUE)}}{:

Saves a list of entries in JSON format. Each entry will be saved in a
    separate file.
    
entries: A list of \code{BiodbEntry} instances.
    
files: A list of file paths, the same length as entries list.
    
compute: If set to \code{TRUE}, computable fields will be saved too.
    
Returned value: None.
    }

\item{\code{terminate()}}{:

Closes \code{Biodb} instance. Call this method when you are done with
    your \code{Biodb} instance.
    
Returned value: None.
    }
}}

\examples{
# Create an instance:
mybiodb <- biodb::Biodb()

# Get the factory instance
fact <- mybiodb$getFactory()

# Terminate instance.
mybiodb$terminate()
mybiodb <- NULL

}
\seealso{
\code{\link{BiodbFactory}}, \code{\link{BiodbCache}},
\code{\link{BiodbConfig}}, \code{\link{BiodbObserver}},
\code{\link{BiodbLogger}}, \code{\link{BiodbEntryFields}},
\code{\link{BiodbDbsInfo}}.
}
