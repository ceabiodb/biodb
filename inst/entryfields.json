{
	"accession": {
		"description": "The accession number of the entry."
	},

	"compound.id": {
		"description": "The compound ID.",
		"card": "many",
		"forbids.duplicates": true,
		"case.insensitive": true,
		"type": "id",
		"alias": "compoundid"
	},

	"cas.id'": {
description = 'CAS ID',           card = 'many', forbids.duplicates = TRUE, case.insensitive = TRUE, type = 'id', alias = 'casid')
	},

	"description'": {
description = 'The decription of the entry.', alias = 'protdesc')
	},

	"name'": {
description = 'The name of the entry.',     card = 'many', alias = c('fullnames', 'synonyms'), case.insensitive = TRUE, forbids.duplicates = TRUE, type = 'name')
	},

	"comp.iupac.name.allowed'": {
description = 'IUPAC allowed name', type = 'name')
	},

	"comp.iupac.name.trad'": {
description = 'IUPAC traditional name', type = 'name')
	},

	"comp.iupac.name.syst'": {
description = 'IUPAC systematic name', type = 'name')
	},

	"comp.iupac.name.pref'": {
description = 'IUPAC preferred name', type = 'name')
	},

	"comp.iupac.name.cas'": {
description = 'IUPAC CAS name', type = 'name')
	},

	"gene.symbol'": {
alias = c('gene.symbols', 'symbol', 'genesymbols'), description = 'A list of gene symbols.', card = 'many', case.insensitive = TRUE, forbids.duplicates = TRUE)
	},

	"logp'": {
description = 'logP',               class = 'double')
	},

	"nb.compounds'": {
alias = 'nbcompounds', description = 'Number of associated compounds.', class = 'integer')
	},

	"formula'": {
description = 'Empirical molecular formula.')
	},

	"inchi'": {
description = 'International Chemical Identifier (InChI).', computable.from = 'chebi')
	},

	"inchikey'": {
description = 'Hash key of the International Chemical Identifier (InChIKey).', computable.from = 'chebi')
	},

	"smiles'": {
description = 'SMILES.')
	},

	"smiles.canonical'": {
description = 'SMILES canonical.')
	},

	"smiles.isomeric'": {
description = 'SMILES isomeric.')
	},

	"catalytic.activity'": {
description = 'Catalytic activity.',                        card = 'many')
	},

	"cofactor'": {
description = 'Cofactor.',                                  card = 'many')
	},

	"charge'": {
description = 'Charge.',               class = 'integer')
	},

	"equation'": {
description = 'Chemical equation')
	},

	"substrates'": {
description = 'Substrates of an enzymatic chemical reaction.', card = 'many')
	},

	"products'": {
description = 'Products of an enzymatic chemical reaction.', card = 'many')
	},

	"average.mass'": {
description = 'Average mass.',    class = 'double', type = 'mass')
	},

	"monoisotopic.mass'": {
alias = c('exact.mass'), description = 'Monoisotopic mass.',    class = 'double', type = 'mass')
	},

	"nominal.mass'": {
description = 'Nominal mass.',         class = 'integer', type = 'mass')
	},

	"molecular.mass'": {
alias = c('mass', 'molecular.weight'), description = 'Molecular mass (also called molecular weight), in Dalton.',     class = 'double', type = 'mass', computable.from = 'chebi')
	},

	"organism'": {
description = 'The biological organism to which this entry belongs.')
	},

	"kegg.organism.code'": {
description = 'The 3-4 characters organism code used un KEGG.')
	},

	"comp.super.class'": {
description = 'Compound super class.', alias = c('superclass', 'super.class'))
	},

	"pathway.class'": {
description = 'Pathway class.', card = 'many')
	},

	"aa.seq'": {
description = 'Amino acids sequence.', computable.from = 'ncbi.ccds', alias = 'sequence')
	},

	"aa.seq.length'": {
description = 'Length of the amino acids sequence.', class = 'integer', alias = c('seq.length', 'length'))
	},

	"aa.seq.location'": {
description = 'Location of the amino acids sequence.', alias = c('seq.location', 'location'))
	},

	"nt.seq.length'": {
description = 'Length of the nucleotids sequence.', class = 'integer')
	},

	"nt.seq'": {
description = 'Nucleotids sequence.')
	},

	"msdev'": {
description = 'Mass spectrometer device.')
	},

	"ms.level'": {
description = 'Mass spectrum level.', class = 'integer')
	},

	"msdevtype'": {
description = 'Mass spectrometer device type.')
	},

	"mstype'": {
description = 'Mass spectrometry type.')
	},

	"ms.mode'": {
description = 'Mass spectrometry mode.', alias = 'msmode', allowed.values = list(neg = c('-', 'negative'), pos = c('+', 'positive')), lower.case = TRUE)
	},

	"msprecmz'": {
description = 'MS precursor M/Z value.',  class =  'double',    card = 'many')
	},

	"msprecannot'": {
description = 'MS precursor annotation.')
	},

	"nb.peaks'": {
description = 'Number of MS peaks.', alias = 'nbpeaks',            class = 'integer')
	},

	"peaks'": {
description = 'Peaks table.',                class = 'data.frame')
	},

	"peak.mz'": {
description = 'Peak M/Z.',      class = 'double', group = 'peak')
	},

	"peak.mztheo'": {
description = 'Peak theoretical M/Z.',  class = 'double', group = 'peak')
	},

	"peak.mzexp'": {
description = 'Peak experimental M/Z.',   class = 'double', group = 'peak')
	},

	"peak.attr'": {
description = 'Peak attribution.', group = 'peak')
	},

	"peak.relative.intensity'": {
description = 'Peak relative intensity, in percentage (from 0 to 100).', class = 'double', group = 'peak')
	},

	"peak.intensity'": {
description = 'Peak intensity.', class = 'double', group = 'peak')
	},

	"peak.formula'": {
description = 'Peak formula.', group = 'peak')
	},

	"peak.comp'": {
description = 'Peak comp.', group = 'peak')
	},

	"peak.mass'": {
description = 'Peak mass.', class = 'double', group = 'peak')
	},

	"peak.error.ppm'": {
description = 'Peak error in PPM.', class = 'double', group = 'peak')
	},

	"chrom.col.name'": {
description = 'Chromatographic column name.', alias = c('chrom.col', 'chromcol'))
	},

	"chrom.col.method.protocol'": {
description = 'Chromatographic method protocol.')
	},

	"chrom.col.id'": {
description = 'Chromatographic column ID.')
	},

	"chrom.col.constructor'": {
description = 'Chromatographic column constructor.')
	},

	"chrom.col.length'": {
description = 'Chromatographic column length.', class = "double")
	},

	"chrom.col.diameter'": {
description = 'Chromatographic column diameter.', class = "double")
	},

	"chrom.solvent'": {
description = 'Chromatographic column solvent.', card = 'many')
	},

	"chrom.flow.rate'": {
description = 'Chromatographic column flow rate.')
	},

	"chrom.flow.gradient'": {
description = 'Chromatographic column flow gradient.')
	},

	"chrom.rt'": {
description = 'Chromatographic column retention time.', alias = c('chromcolrt', 'chrom.col.rt'), class = 'double')
	},

	"chrom.rt.min'": {
description = 'Chromatographic column retention time minimum.', class = "double", alias = 'chrom.col.rt.min')
	},

	"chrom.rt.max'": {
description = 'Chromatographic column retention time maximum.', class = "double", alias = 'chrom.col.rt.max')
	},

	"chrom.rt.unit'": {
description = 'Chromatographic column retention time unit.', alias = 'chrom.col.rt.unit', allowed.values = c('min', 's'), lower.case = TRUE)
	},

}
