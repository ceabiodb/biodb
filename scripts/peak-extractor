#!/usr/bin/env Rscript
# vi: ft=R fdm=marker

# Constants {{{1
################################################################

ARGS <- commandArgs(trailingOnly = F)
SCRIPT.PATH <- sub("--file=", "", ARGS[grep("--file=", ARGS)])
SCRIPT.DIR <- dirname(SCRIPT.PATH)
if ( ! R.utils::isAbsolutePath(SCRIPT.DIR)) SCRIPT.DIR <- file.path(getwd(), SCRIPT.DIR)
PROG.NAME <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)

DFT.MAX <- 0
DFT.MZ.FIELD <- 'mz'
DFT.MZ.SEP <- "\t"
DFT.MZ.TOL <- 0.01
DFT.MZ.TOL.UNIT <- 'plain'
DFT.OUTPUT.FILE <- '%d-%m-ms%l-tol%t-%u.tsv'
DFT.OUTPUT.SEP <- "\t"
DFT.MS.LEVEL <- 0

# Print help {{{1
################################################################

print.help <- function(spec) {
	cat(getopt::getopt(spec, usage = TRUE, command = PROG.NAME))
	q(status = 0)
}

# Read args {{{1
################################################################

read.args <-  function() {
	spec = c(
		'database',         'd',            1,  'character',    'The database from which to extract the peaks.',
		'debug',            'g',            0,  'logical',      'Enable debug messages.',
		'help',             'h',            0,  'logical',      'Print this help.',
		'mslevel',          'l',            1,  'integer',      paste('The wanted MS level. Set to 0 to get all MS levels. Default is ', DFT.MS.LEVEL, '.', sep = ''),
		'mzfile',           'z',            1,  'character',    'A file containg M/Z values. A search for entries inside the database will be made for each M/Z value, using the provided tolerance. The entries returned by the search will be used to build the peak table.',
		'mzfield',          'f',            1,  'character',    paste('The field/column in the M/Z file (option -z) where to find the M/Z values. Default is ', DFT.MZ.FIELD, '.', sep = ''),
		'mzsep',            's',            1,  'character',    paste('The separator used inside the M/Z file. Default is tabulation.', sep = ''),
		'mztol',            't',            1,  'numeric',      paste('The M/Z tolerance to use. Default is ', DFT.MZ.TOL, '.', sep = ''),
		'mztolunit',        'u',            1,  'character',    paste('The M/Z tolerance unit to use. Default is ', DFT.MZ.TOL.UNIT, '.', sep = ''),
		'max',              'm',            1,  'integer',      paste('The maximum number of entries to retrieve. Set it to 0 to get all entries. Default is ', DFT.MAX, '.', sep = ''),
		'output',           'o',            1,  'character',    paste('The path to the output file. Replacement tags can be used: %d for the database name, %m for the maximum of entries, %l for the MS level, %t for the tolerance and %u for the tolerance unit. Default is "', DFT.OUTPUT.FILE, '".', sep = ''),
		'outputsep',        'S',            1,  'character',    paste('The separator character used in the output file. Default is tabulation.', sep = ''),
		'restricttomz',     'x',            0,  'logical',      'Restrict output to M/Z values input from M/Z file (-z), within the specified tolerance.'
		)
	spec <- matrix(spec, byrow = TRUE, ncol = 5)
	opt <- getopt::getopt(spec)

	# Help
	if ( ! is.null(opt$help))
		print.help(spec)

	# Set default values
 	if (is.null(opt[['mslevel']]))
	     opt[['mslevel']] <- DFT.MS.LEVEL
 	if (is.null(opt[['mzfield']]))
	     opt[['mzfield']] <- DFT.MZ.FIELD
 	if (is.null(opt[['mzsep']]))
	     opt[['mzsep']] <- DFT.MZ.SEP
 	if (is.null(opt[['mztol']]))
	     opt[['mztol']] <- DFT.MZ.TOL
 	if (is.null(opt[['mztolunit']]))
	     opt[['mztolunit']] <- DFT.MZ.TOL.UNIT
 	if (is.null(opt[['max']]))
	     opt[['max']] <- DFT.MAX
 	if (is.null(opt[['output']]))
	     opt[['output']] <- DFT.OUTPUT.FILE
 	if (is.null(opt[['outputsep']]))
	     opt[['outputsep']] <- DFT.OUTPUT.SEP

	# Check arguments
	if (is.null(opt$database)) stop("You must choose a database through -d option.")

	return(opt)
}

# Search for entry IDs {{{1
################################################################

search.for.entry.ids <- function(conn, mz.values, tol, tolunit, max, ms.level) {

	# Get some Massbank MS spectra for each M/Z value
	mz.to.spectra.ids <- list()
	i <- 0
	for (mz in mz.values) {

		i <- i + 1
		cat("\n")
		cat('================================================================================')
		cat('Processing M/Z value ', mz, ', #', i, '/', length(mz.values), ".\n\n", sep = '')

		ids <- conn$searchMzTol(mz = mz, mz.tol = tol, mz.tol.unit = tolunit, max.results = max, ms.level = ms.level)

		mz.to.spectra.ids[[as.character(mz)]] <- ids
	}

	# Make a list of spectra IDs, taking one ID from each M/Z value at a time
	spectra.ids <- character(0)
	while(length(mz.to.spectra.ids) > 0) {
		for (mz in names(mz.to.spectra.ids)) {

			# Get list of spectra IDs for this M/Z value
			ids <- mz.to.spectra.ids[[mz]]

			if (length(ids) == 0)
				mz.to.spectra.ids <- mz.to.spectra.ids[names(mz.to.spectra.ids) != mz]
			else {
				# Take first ID
				spectra.ids <- c(spectra.ids, ids[[1]])
				if (length(ids) > 1)
					mz.to.spectra.ids[[mz]] <- ids[2:length(ids)]
				else
					mz.to.spectra.ids <- mz.to.spectra.ids[names(mz.to.spectra.ids) != mz]
			}
		}
	}

	# Remove duplicates
	spectra.ids <- spectra.ids[ ! duplicated(spectra.ids)]

	# Cut
	if ( ! is.na(max) && max > 0 && length(spectra.ids) > max)
		spectra.ids <- spectra.ids[1:max]

	return(spectra.ids)
}

# Restrict to M/Z input {{{1
################################################################

restrict.to.mz.input <- function(df, mz.values, tol, tolunit) {

	print('********************************************************************************restrict.to.mz.input 01')
	selected.lines <- logical(nrow(df))

	for (mz in mz.values) {

		# Set range
		if (tolunit == 'ppm') {
			mz.min <- mz * (1 - tol) * 1e-6
			mz.max <- mz * (1 + tol) * 1e-6
		} else {
			mz.min <- mz - tol
			mz.max <- mz + tol
		}

		# Filter data frame on range
		selected.lines <- selected.lines | (df[['peak.mz']] >= mz.min & df[['peak.mz']] <= mz.max)
	}

	return(df[selected.lines,])
}

# MAIN {{{1
################################################################

opt <- read.args()

# Instantiate biodb
logger = biodb::BiodbLogger()
if ( ! is.null(opt$debug))
	logger$includeMsgType('debug')
biodb <- biodb::Biodb(logger = FALSE, observers = logger)
biodb$getConfig()$set('useragent', 'peak-extractor ; pierrick.rogermele@icloud.com')
biodb$getConfig()$enable('factory.cache')

# Create database connection
conn <- biodb$getFactory()$createConn(opt$database)

# Get entry IDs
if (is.null(opt$mzfile)) {
	entry.ids <- conn$getEntryIds(max.results = opt$max, ms.level = opt$mslevel)
} else {
	df <- read.table(opt$mzfile, sep = opt$mzsep, header = TRUE)
	mz.values <- df[[opt$mzfield]]
	entry.ids <- search.for.entry.ids(conn = conn, mz.values = mz.values, tol = opt$mztol, tolunit = opt$mztolunit, max = opt$max, ms.level = opt$mslevel)
}

# Get entries
cat("\n")
cat('================================================================================')
cat("Getting entries.\n\n")
spectra.entries <- biodb$getFactory()$getEntry('massbank.jp', entry.ids, drop = FALSE)

# Convert to data frame
cat("\n")
cat('================================================================================')
cat("Converting entries to data frame.\n\n")
df <- biodb$entriesToDataframe(spectra.entries, only.atomic = FALSE, compute = FALSE)

# Restrict to M/Z input
cat("\n")
cat('================================================================================')
cat("Restricting output to list of M/Z values given in input file.\n\n")
if ( ! is.null(opt$mzfile) && ! is.null(opt$restricttomz))
	df <- restrict.to.mz.input(df, mz.values = mz.values, tol = opt$mztol, tolunit = opt$mztolunit)

# Write spectra peaks as CSV database
cat("\n")
cat('================================================================================')
filename <- opt$output
filename <- sub('%d', opt$database, filename)
filename <- sub('%m', opt$max, filename)
filename <- sub('%l', opt$mslevel, filename)
filename <- sub('%t', opt$mztol, filename)
filename <- sub('%u', opt$mztolunit, filename)
cat("Writing data frame into ", filename,".\n\n", sep = '')
write.table(df, file = filename, sep = opt$outputsep, row.names = FALSE, col.names = TRUE)
